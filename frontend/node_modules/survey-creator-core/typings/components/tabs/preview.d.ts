import { SurveySimulatorModel } from "../simulator";
import { Base, PageModel, SurveyModel, Action, IAction, ActionContainer } from "survey-core";
import { SurveyCreatorModel } from "../../creator-base";
export declare class PreviewViewModel extends Base {
    protected surveyProvider: SurveyCreatorModel;
    private startThemeClasses;
    static tagRegex: RegExp;
    enableInvisiblePages: boolean;
    private json;
    pages: ActionContainer;
    prevPageAction: Action;
    nextPageAction: Action;
    selectPageAction: Action;
    testAgainAction: Action;
    simulator: SurveySimulatorModel;
    onSurveyCreatedCallback: (survey: SurveyModel) => any;
    showInvisibleElements: any;
    showPagesInTestSurveyTab: any;
    isRunning: boolean;
    pageListItems: Array<IAction>;
    activePage: PageModel;
    get activeLanguage(): string;
    set activeLanguage(val: string);
    get survey(): SurveyModel;
    get pageActions(): Array<Action>;
    get isPageToolbarVisible(): boolean;
    constructor(surveyProvider: SurveyCreatorModel, startThemeClasses?: any);
    get isMobileView(): boolean;
    get showResults(): boolean;
    updateSimulatorSurvey(json: any, theme: any): void;
    setJSON(json: any, currTheme: any): void;
    initialize(json: any, options: any): void;
    private updatePageItem;
    private getCurrentPageItem;
    private getSelectPageTitle;
    private getPageTitle;
    protected updatePageList(): void;
    protected getTabName(): string;
    protected getShowResults(): boolean;
    show(): void;
    testAgain(): void;
    buildActions(): void;
    private setActivePageItem;
    private getPageItemByPage;
    private updateResultsTemplate;
    setTheme(themeName: string, themeMapper: any): void;
    protected onPropertyValueChanged(name: string, oldValue: any, newValue: any): void;
    private updatePrevNextPageActionState;
    onScroll(): boolean;
    dispose(): void;
}
